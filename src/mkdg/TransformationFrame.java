/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mkdg;

import static java.awt.image.ImageObserver.HEIGHT;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.w3c.dom.css.Rect;

/**
 *
 * @author daroslav
 */
public class TransformationFrame extends javax.swing.JFrame implements ChangeListener {

    
    private Method method;
    private FastRGB rgbModel;
    private int[][] structuralElement;
    private int width;
    private int height;
    
    private JSlider thresholdSlider;
    private TransformationCanvas canvas;
    
    /**
     * Creates new form TransformationFrame
     */
    public TransformationFrame(FastRGB rgbModel, Method method, int[][] structuralElement, int width, int height) {
        this.rgbModel = rgbModel;
        this.method = method;
        this.structuralElement = structuralElement;
        this.width = width;
        this.height = height;
        
        initComponents();
        showBinaryImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        binaryImagePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        binaryImagePanel.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout binaryImagePanelLayout = new javax.swing.GroupLayout(binaryImagePanel);
        binaryImagePanel.setLayout(binaryImagePanelLayout);
        binaryImagePanelLayout.setHorizontalGroup(
            binaryImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
        );
        binaryImagePanelLayout.setVerticalGroup(
            binaryImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(binaryImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(binaryImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void showBinaryImage() {
                
        canvas = new TransformationCanvas(rgbModel);
        this.setBounds(0, 0, (int)(width*canvas.getTileSize() * 1.3), (int)(height*canvas.getTileSize() * 1.3));
        this.invalidate();
        binaryImagePanel.setBounds(0,0, this.getWidth(), height*canvas.getTileSize());
        binaryImagePanel.invalidate();
        
        canvas.setBounds((binaryImagePanel.getWidth() - width*canvas.getTileSize())/2, 
                         0, 
                         width*canvas.getTileSize(),
                         height*canvas.getTileSize());
        
        binaryImagePanel.add(canvas);
        binaryImagePanel.invalidate();
        canvas.repaint();

        thresholdSlider = new JSlider();
        thresholdSlider.setBounds(20, binaryImagePanel.getHeight() + 10, binaryImagePanel.getWidth() - 40, 25);
        thresholdSlider.setVisible(true);
        binaryImagePanel.add(thresholdSlider);
        binaryImagePanel.invalidate();
        thresholdSlider.setMinimum(0);
        thresholdSlider.setMaximum(100);
        thresholdSlider.setValue(20);
        thresholdSlider.setMajorTickSpacing(10);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.addChangeListener(this);
        
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        Object source = e.getSource();
        if(source instanceof JSlider) {
            JSlider theJSlider = (JSlider) source;
            //if (!theJSlider.getValueIsAdjusting()) {
                System.out.println("Slider changed: " + theJSlider.getValue());
                rgbModel.setThreshold(theJSlider.getValue());
                canvas.updateBinaryImage();
            //}
        }
    }
 
    
    public enum Method {
        Erosion, Dilation
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel binaryImagePanel;
    // End of variables declaration//GEN-END:variables
}
