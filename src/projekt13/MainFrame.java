/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekt13;

import java.awt.AlphaComposite;
import java.awt.Canvas;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 *
 * @author daroslav
 */
public class MainFrame extends javax.swing.JFrame implements ZoomCallback {
    
    private String lastChoosenPath;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        int elementSize = ((int)((float)elementPanel.getHeight()-40)/3);
        ElementCanvas canvas = new ElementCanvas(elementSize);
        canvas.setBounds((elementPanel.getWidth() - (elementSize+1)*3)/2, 20, (elementSize+1)*3, (elementSize+1)*3);
        elementPanel.add(canvas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        teachPanel = new javax.swing.JPanel();
        binaryImagePanel = new javax.swing.JPanel();
        loadImageButton = new javax.swing.JButton();
        filePathEditText = new javax.swing.JTextField();
        zoomedImagePanel = new javax.swing.JPanel();
        elementPanel = new javax.swing.JPanel();
        showErosionButton = new javax.swing.JButton();
        showDilationButton = new javax.swing.JButton();
        programPanel = new javax.swing.JPanel();
        gamePanel = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        binaryImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Obraz binarny", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        javax.swing.GroupLayout binaryImagePanelLayout = new javax.swing.GroupLayout(binaryImagePanel);
        binaryImagePanel.setLayout(binaryImagePanelLayout);
        binaryImagePanelLayout.setHorizontalGroup(
            binaryImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        binaryImagePanelLayout.setVerticalGroup(
            binaryImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        loadImageButton.setText("Wczytaj obraz binarny");
        loadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageButtonActionPerformed(evt);
            }
        });

        filePathEditText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathEditTextActionPerformed(evt);
            }
        });

        zoomedImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Powiększony fragment", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        javax.swing.GroupLayout zoomedImagePanelLayout = new javax.swing.GroupLayout(zoomedImagePanel);
        zoomedImagePanel.setLayout(zoomedImagePanelLayout);
        zoomedImagePanelLayout.setHorizontalGroup(
            zoomedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        zoomedImagePanelLayout.setVerticalGroup(
            zoomedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        elementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Stwórz element strukturalny", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout elementPanelLayout = new javax.swing.GroupLayout(elementPanel);
        elementPanel.setLayout(elementPanelLayout);
        elementPanelLayout.setHorizontalGroup(
            elementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        elementPanelLayout.setVerticalGroup(
            elementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        showErosionButton.setText("Pokaż erozję");
        showErosionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showErosionButtonActionPerformed(evt);
            }
        });

        showDilationButton.setText("Pokaż dylatację");
        showDilationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDilationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teachPanelLayout = new javax.swing.GroupLayout(teachPanel);
        teachPanel.setLayout(teachPanelLayout);
        teachPanelLayout.setHorizontalGroup(
            teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loadImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
            .addGroup(teachPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePathEditText)
                    .addGroup(teachPanelLayout.createSequentialGroup()
                        .addGroup(teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(elementPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(binaryImagePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zoomedImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showErosionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showDilationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        teachPanelLayout.setVerticalGroup(
            teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teachPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(filePathEditText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(binaryImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zoomedImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(elementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teachPanelLayout.createSequentialGroup()
                        .addComponent(showErosionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showDilationButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Nauka", teachPanel);

        javax.swing.GroupLayout programPanelLayout = new javax.swing.GroupLayout(programPanel);
        programPanel.setLayout(programPanelLayout);
        programPanelLayout.setHorizontalGroup(
            programPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        programPanelLayout.setVerticalGroup(
            programPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Program", programPanel);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Gra", gamePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filePathEditTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathEditTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathEditTextActionPerformed

    private void loadImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageButtonActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        
        String pathToLoad;
        if(lastChoosenPath == null) {
            pathToLoad = System.getProperty("user.home");
        } else {
            pathToLoad = lastChoosenPath;
        }
        
        fileChooser.setCurrentDirectory(new File(pathToLoad));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            saveLastPath(selectedFile);
            showFileAsBinaryImage(selectedFile);
        }
    }//GEN-LAST:event_loadImageButtonActionPerformed

    private void showErosionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showErosionButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showErosionButtonActionPerformed

    private void showDilationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDilationButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showDilationButtonActionPerformed

    private void saveLastPath(File selectedFile) {
        String[] dividedPath = selectedFile.getAbsolutePath().split(File.separator);
        dividedPath = Arrays.copyOf(dividedPath, dividedPath.length - 1);
        StringBuilder pathWithoutLastSegment = new StringBuilder();
        for (String s : dividedPath) {
            pathWithoutLastSegment.append(s);
            pathWithoutLastSegment.append(File.separator);
        } 
        lastChoosenPath = pathWithoutLastSegment.toString();
        System.out.println("Selected file: " + selectedFile.getAbsolutePath()); 
        System.out.println("Last path: " + lastChoosenPath); 
        filePathEditText.setText(selectedFile.getAbsolutePath());
    }
    
    private void showFileAsBinaryImage(File selectedFile) {
        Image pic = null;
        try {
            pic = ImageIO.read(selectedFile);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(pic != null) {
            SelectedImageCanvas canvas = new SelectedImageCanvas(pic, this);
            canvas.setBounds((binaryImagePanel.getWidth() - pic.getWidth(null))/2, (binaryImagePanel.getHeight() - pic.getHeight(null))/2, pic.getWidth(null), pic.getHeight(null));
            binaryImagePanel.add(canvas);
        }
    }   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel binaryImagePanel;
    private javax.swing.JPanel elementPanel;
    private javax.swing.JTextField filePathEditText;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loadImageButton;
    private javax.swing.JPanel programPanel;
    private javax.swing.JButton showDilationButton;
    private javax.swing.JButton showErosionButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel teachPanel;
    private javax.swing.JPanel zoomedImagePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void zoomed(Image image, int x1, int y1, int x2, int y2) {
        
        zoomedImagePanel.removeAll();
        int width, height;
        
        BufferedImage croppedImage = cropImage(toBufferedImage(image), x1, y1, x2, y2);
        float aspectRatio = (float)croppedImage.getWidth() / (float)croppedImage.getHeight();

        if(croppedImage.getHeight() < croppedImage.getWidth()) {
            width = zoomedImagePanel.getWidth() - 50;
            height = (int)((float)width / aspectRatio);
        } else {
            height = zoomedImagePanel.getHeight() - 50;
            width = (int)(aspectRatio * (float)height);
        }
        
        croppedImage = createResizedCopy(croppedImage, width, height, false);
        ZoomedImageCanvas canvas = new ZoomedImageCanvas(croppedImage);
      
        canvas.setBounds((zoomedImagePanel.getWidth() - croppedImage.getWidth(null))/2, (zoomedImagePanel.getHeight() - croppedImage.getHeight(null))/2, croppedImage.getWidth(null), croppedImage.getHeight(null));
        zoomedImagePanel.add(canvas);
    }
    
    private BufferedImage cropImage(BufferedImage src, int x1, int y1, int x2, int y2) {
      BufferedImage dest = src.getSubimage(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
      return dest; 
   }
    
    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }
    
    BufferedImage createResizedCopy(Image originalImage, 
    		int scaledWidth, int scaledHeight, 
    		boolean preserveAlpha) {
    	int imageType = preserveAlpha ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;
    	BufferedImage scaledBI = new BufferedImage(scaledWidth, scaledHeight, imageType);
    	Graphics2D g = scaledBI.createGraphics();
    	if (preserveAlpha) {
    		g.setComposite(AlphaComposite.Src);
    	}
    	g.drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null); 
    	g.dispose();
    	return scaledBI;
    }
}
